{% set version = "21.0.0.dev1" %}

package:
  name: flang-split
  version: {{ version }}

source:
  # url: https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-{{ version.replace(".rc", "-rc") }}.tar.gz
  url: https://github.com/llvm/llvm-project/archive/e5129b7e2092c54e503f60cc0ac552c765d5a144.tar.gz
  sha256: f8506cf5d53a5d555384a8917432db40ef8a2b89a5172d64f8a753b649f0274b
  patches:
    - patches/0001-DEBUG-flang_rt-paths.patch
    - patches/0002-avoid-baking-in-build-time-paths-to-compiler-rt-into.patch

build:
  number: 0
  # intentionally only windows (main target) & linux (debuggability)
  skip: true  # [osx]

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - ninja
    - mlir =={{ version }}     # [build_platform != target_platform]
    # for showing CPU info of CI agent
    - numpy *
  host:
    - clangdev =={{ version }}
    - compiler-rt =={{ version }}
    - lit =={{ version }}
    - llvmdev =={{ version }}
    - mlir =={{ version }}
    - zlib

outputs:
  - name: flang-rt
    script: install_flang-rt.sh   # [unix]
    script: install_flang-rt.bat  # [win]
    requirements:
      build:
        - cmake
        - ninja
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ pin_subpackage('flang', exact=True) }}
      host:
        - clangdev =={{ version }}
        - compiler-rt =={{ version }}
        - llvmdev =={{ version }}
        - mlir =={{ version }}
    test:
      commands:
        # static library
        # - test -f $PREFIX/lib/libflang_rt.runtime.a                         # [linux]
        # - if not exist %LIBRARY_LIB%\windows\flang_rt.static.lib exit 1  # [win]

  # compatibility output for previous name
  - name: libflang
    requirements:
      host:
        - {{ pin_subpackage('flang-rt', exact=True) }}
      run:
        - {{ pin_subpackage('flang-rt', exact=True) }}
    test:
      commands:
        - echo "pure metapackage"

  - name: flang
    script: install_flang.sh  # [unix]
    script: install_flang.bat  # [win]
    requirements:
      build:
        - cmake
        - ninja
        # for strong run-exports
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
      host:
        - clangdev =={{ version }}
        - compiler-rt =={{ version }}
        - llvmdev =={{ version }}
        - mlir =={{ version }}
        # for required run-exports
        - llvm =={{ version }}
        - libclang-cpp =={{ version }}
        # ninja really wants to find z.lib on win
        - zlib  # [win]
        - zstd  # [win]
      run:
        - sysroot_{{ target_platform }} >={{ c_stdlib_version }}    # [linux]
        - clang =={{ version }}
        - compiler-rt =={{ version }}   # [win]
    test:
      commands:
        - test -f $PREFIX/bin/flang                     # [linux]
        - if not exist %LIBRARY_BIN%\flang.exe exit 1   # [win]

  - name: flang_impl_{{ cross_target_platform }}
    script: install_flang_impl.sh   # [unix]
    requirements:
      - {{ pin_subpackage("flang", exact=True) }}
      - {{ pin_subpackage("flang-rt", exact=True) }}
      - lld                     # [win]
      # for llvm-ar.exe
      - llvm-tools              # [win]
      - compiler-rt_{{ cross_target_platform }} ={{ version }}
    test:
      commands:
        # we don't cross-compile on windows -> no symlinks
        - {{ CBUILD }}-flang --version  # [unix]
        - {{ CHOST }}-flang --version   # [unix]

  - name: flang_{{ cross_target_platform }}
    script: install_flang_scripts.sh    # [unix]
    script: install_flang_scripts.bat   # [win]
    # run_exports:
    #   strong:                           # [unix]
    #     - flang-rt >={{ version }}      # [unix]
    requirements:
      build:
        - sed       # [unix]
        - m2-sed    # [win]
      run:
        - {{ pin_subpackage("flang_impl_" ~ cross_target_platform, exact=True) }}
    test:
      files:
        - hello_world.f90
      commands:
        # on linux we point FC to the symlink; on windows, we point to the binary
        - $FC hello_world.f90       # [unix]
        - "%FC% hello_world.f90"    # [win]
        - ./a.out   # [unix]
        - a.exe     # [win]

about:
  home: https://flang.llvm.org
  license: Apache-2.0
  license_file: flang/LICENSE.TXT
  summary: Flang is a Fortran compiler targeting LLVM.
  dev_url: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - isuruf
    - h-vetinari
  feedstock-name: flang
